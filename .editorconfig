# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# All files
[*]
charset = utf-8
insert_final_newline = true
trim_trailing_whitespace = true
indent_style = space

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_size = 2

# Markdown files
[*.md]
trim_trailing_whitespace = false
max_line_length = 120

# Shell scripts
[*.sh]
end_of_line = lf
indent_size = 2

# PowerShell scripts
[*.ps1]
indent_size = 2

# C# files
[*.cs]

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Wrapping preferences
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# Code style defaults
csharp_using_directive_placement = outside_namespace:warning
csharp_prefer_braces = true:warning
csharp_prefer_static_local_function = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_prefer_static_local_function = true:suggestion
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Expression-bodied members
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Naming conventions
dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

# Naming styles
dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

# IDE0005: Using directive is unnecessary.
dotnet_diagnostic.IDE0005.severity = warning

# Roslynator analyzers
# Code quality and reliability
dotnet_diagnostic.RCS1001.severity = none      # Add braces (conflicts with csharp_prefer_braces)
dotnet_diagnostic.RCS1003.severity = none      # Add braces to if-else (conflicts with csharp_prefer_braces)
dotnet_diagnostic.RCS1004.severity = none      # Remove braces from if-else (conflicts with csharp_prefer_braces = true)
dotnet_diagnostic.RCS1007.severity = none      # Add braces (conflicts with csharp_prefer_braces)
dotnet_diagnostic.RCS1021.severity = suggestion # Convert lambda expression body to expression-body
dotnet_diagnostic.RCS1032.severity = warning   # Remove redundant parentheses
dotnet_diagnostic.RCS1036.severity = warning   # Remove redundant empty line
dotnet_diagnostic.RCS1037.severity = warning   # Remove trailing white-space
dotnet_diagnostic.RCS1055.severity = warning   # Reduce if nesting
dotnet_diagnostic.RCS1068.severity = warning   # Simplify logical negation
dotnet_diagnostic.RCS1077.severity = warning   # Optimize LINQ method call
dotnet_diagnostic.RCS1085.severity = suggestion # Use auto-implemented property
dotnet_diagnostic.RCS1090.severity = warning   # Add call to 'ConfigureAwait' (or vice versa)
dotnet_diagnostic.RCS1102.severity = warning   # Make class static
dotnet_diagnostic.RCS1118.severity = warning   # Mark local variable as const
dotnet_diagnostic.RCS1123.severity = warning   # Add parentheses when necessary
dotnet_diagnostic.RCS1124.severity = suggestion # Inline local variable
dotnet_diagnostic.RCS1138.severity = suggestion # Add summary to documentation comment
dotnet_diagnostic.RCS1139.severity = suggestion # Add summary element to documentation comment
dotnet_diagnostic.RCS1141.severity = suggestion # Add 'param' element to documentation comment
dotnet_diagnostic.RCS1142.severity = suggestion # Add 'typeparam' element to documentation comment
dotnet_diagnostic.RCS1155.severity = warning   # Use StringComparison when comparing strings
dotnet_diagnostic.RCS1158.severity = warning   # Static member in generic type should use a type parameter
dotnet_diagnostic.RCS1163.severity = warning   # Unused parameter
dotnet_diagnostic.RCS1168.severity = warning   # Parameter name differs from base name
dotnet_diagnostic.RCS1170.severity = warning   # Use read-only auto-implemented property
dotnet_diagnostic.RCS1174.severity = warning   # Remove redundant async/await
dotnet_diagnostic.RCS1181.severity = suggestion # Convert comment to documentation comment
dotnet_diagnostic.RCS1194.severity = warning   # Implement exception constructors
dotnet_diagnostic.RCS1196.severity = suggestion # Call extension method as instance method
dotnet_diagnostic.RCS1197.severity = warning   # Optimize StringBuilder.Append/AppendLine call
dotnet_diagnostic.RCS1202.severity = warning   # Avoid NullReferenceException
dotnet_diagnostic.RCS1211.severity = suggestion # Remove unnecessary 'else'
dotnet_diagnostic.RCS1214.severity = warning   # Unnecessary interpolated string
dotnet_diagnostic.RCS1220.severity = suggestion # Use pattern matching instead of combination of 'is' operator and cast operator
dotnet_diagnostic.RCS1225.severity = suggestion # Make class sealed
dotnet_diagnostic.RCS1226.severity = suggestion # Add paragraph to documentation comment
dotnet_diagnostic.RCS1228.severity = warning   # Unused element in documentation comment
dotnet_diagnostic.RCS1231.severity = suggestion # Make parameter ref read-only
dotnet_diagnostic.RCS1235.severity = warning   # Optimize method call
dotnet_diagnostic.RCS1238.severity = warning   # Avoid nested ?: operators

# Security-critical rules (set to error for security-first project)
dotnet_diagnostic.RCS1243.severity = error     # Duplicate word in a comment
dotnet_diagnostic.RCS1244.severity = error     # Simplify 'default' expression

# Additional security and reliability rules
dotnet_diagnostic.CA1031.severity = warning    # Do not catch general exception types
dotnet_diagnostic.CA1050.severity = warning    # Declare types in namespaces
dotnet_diagnostic.CA1062.severity = warning    # Validate arguments of public methods
dotnet_diagnostic.CA1063.severity = warning    # Implement IDisposable correctly
dotnet_diagnostic.CA1303.severity = none       # Do not pass literals as localized parameters (too noisy for API)
dotnet_diagnostic.CA1305.severity = warning    # Specify IFormatProvider
dotnet_diagnostic.CA1307.severity = warning    # Specify StringComparison for clarity
dotnet_diagnostic.CA1308.severity = warning    # Normalize strings to uppercase
dotnet_diagnostic.CA1310.severity = warning    # Specify StringComparison for correctness
dotnet_diagnostic.CA1508.severity = warning    # Avoid dead conditional code
dotnet_diagnostic.CA1707.severity = none       # Identifiers should not contain underscores (allow for test names)
dotnet_diagnostic.CA1710.severity = suggestion # Identifiers should have correct suffix
dotnet_diagnostic.CA1711.severity = suggestion # Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1716.severity = suggestion # Identifiers should not match keywords
dotnet_diagnostic.CA1806.severity = warning    # Do not ignore method results
dotnet_diagnostic.CA1810.severity = warning    # Initialize reference type static fields inline
dotnet_diagnostic.CA1816.severity = warning    # Call GC.SuppressFinalize correctly
dotnet_diagnostic.CA1820.severity = warning    # Test for empty strings using string length
dotnet_diagnostic.CA1822.severity = suggestion # Mark members as static
dotnet_diagnostic.CA1826.severity = warning    # Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1827.severity = warning    # Do not use Count/LongCount when Any can be used
dotnet_diagnostic.CA1828.severity = warning    # Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1829.severity = warning    # Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1830.severity = warning    # Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1831.severity = warning    # Use AsSpan instead of Range-based indexers for string
dotnet_diagnostic.CA1832.severity = warning    # Use AsSpan or AsMemory instead of Range-based indexers
dotnet_diagnostic.CA1833.severity = warning    # Use AsSpan or AsMemory instead of Range-based indexers
dotnet_diagnostic.CA1834.severity = warning    # Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1835.severity = warning    # Prefer the memory-based overloads of ReadAsync/WriteAsync
dotnet_diagnostic.CA1836.severity = warning    # Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1837.severity = warning    # Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
dotnet_diagnostic.CA1838.severity = warning    # Avoid StringBuilder parameters for P/Invokes
dotnet_diagnostic.CA1839.severity = warning    # Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
dotnet_diagnostic.CA1840.severity = warning    # Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
dotnet_diagnostic.CA1841.severity = warning    # Prefer Dictionary Contains methods
dotnet_diagnostic.CA1842.severity = warning    # Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1843.severity = warning    # Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1844.severity = warning    # Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1845.severity = warning    # Use span-based 'string.Concat'
dotnet_diagnostic.CA1846.severity = warning    # Prefer AsSpan over Substring
dotnet_diagnostic.CA1847.severity = warning    # Use string.Contains(char) instead of string.Contains(string) with single characters
dotnet_diagnostic.CA1848.severity = none       # Use LoggerMessage delegates (too strict for this phase)
dotnet_diagnostic.CA1849.severity = warning    # Call async methods when in an async method
dotnet_diagnostic.CA1850.severity = warning    # Prefer static HashData method over ComputeHash
dotnet_diagnostic.CA2007.severity = none       # Do not directly await a Task (conflicts with RCS1090)
dotnet_diagnostic.CA2008.severity = warning    # Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2009.severity = warning    # Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2011.severity = warning    # Do not assign property within its setter
dotnet_diagnostic.CA2012.severity = warning    # Use ValueTask correctly
dotnet_diagnostic.CA2013.severity = warning    # Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2014.severity = warning    # Do not use stackalloc in loops
dotnet_diagnostic.CA2015.severity = warning    # Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2016.severity = warning    # Forward the CancellationToken parameter
dotnet_diagnostic.CA2017.severity = warning    # Parameter count mismatch
dotnet_diagnostic.CA2018.severity = warning    # Buffer size argument is incorrect
dotnet_diagnostic.CA2200.severity = warning    # Rethrow to preserve stack details
dotnet_diagnostic.CA2201.severity = warning    # Do not raise reserved exception types
dotnet_diagnostic.CA2207.severity = warning    # Initialize value type static fields inline
dotnet_diagnostic.CA2208.severity = warning    # Instantiate argument exceptions correctly
dotnet_diagnostic.CA2211.severity = warning    # Non-constant fields should not be visible
dotnet_diagnostic.CA2213.severity = warning    # Disposable fields should be disposed
dotnet_diagnostic.CA2214.severity = warning    # Do not call overridable methods in constructors
dotnet_diagnostic.CA2215.severity = warning    # Dispose methods should call base class dispose
dotnet_diagnostic.CA2216.severity = warning    # Disposable types should declare finalizer
dotnet_diagnostic.CA2217.severity = suggestion # Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2219.severity = warning    # Do not raise exceptions in exception clauses
dotnet_diagnostic.CA2225.severity = suggestion # Operator overloads have named alternates
dotnet_diagnostic.CA2226.severity = warning    # Operators should have symmetrical overloads
dotnet_diagnostic.CA2227.severity = suggestion # Collection properties should be read only
dotnet_diagnostic.CA2229.severity = warning    # Implement serialization constructors
dotnet_diagnostic.CA2231.severity = warning    # Overload operator equals on overriding ValueType.Equals
dotnet_diagnostic.CA2234.severity = warning    # Pass System.Uri objects instead of strings
dotnet_diagnostic.CA2235.severity = warning    # Mark all non-serializable fields
dotnet_diagnostic.CA2237.severity = warning    # Mark ISerializable types with SerializableAttribute
dotnet_diagnostic.CA2241.severity = warning    # Provide correct arguments to formatting methods
dotnet_diagnostic.CA2242.severity = warning    # Test for NaN correctly
dotnet_diagnostic.CA2243.severity = warning    # Attribute string literals should parse correctly
dotnet_diagnostic.CA2244.severity = warning    # Do not duplicate indexed element initializations
dotnet_diagnostic.CA2245.severity = warning    # Do not assign a property to itself
dotnet_diagnostic.CA2246.severity = warning    # Do not assign a symbol and its member in the same statement
dotnet_diagnostic.CA2247.severity = warning    # Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum
dotnet_diagnostic.CA2248.severity = warning    # Provide correct enum argument to Enum.HasFlag
dotnet_diagnostic.CA2249.severity = warning    # Consider using String.Contains instead of String.IndexOf
dotnet_diagnostic.CA2250.severity = warning    # Use ThrowIfCancellationRequested
dotnet_diagnostic.CA2251.severity = warning    # Use String.Equals over String.Compare
dotnet_diagnostic.CA2252.severity = warning    # Opt in to preview features
dotnet_diagnostic.CA2253.severity = warning    # Named placeholders should not be numeric values
dotnet_diagnostic.CA2254.severity = none       # Template should be a static expression (too strict for logging)
dotnet_diagnostic.CA2255.severity = warning    # The ModuleInitializer attribute should not be used in libraries
dotnet_diagnostic.CA2256.severity = warning    # All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface

# Additional Roslynator rules for code quality
dotnet_diagnostic.RCS1018.severity = suggestion # Add accessibility modifiers
dotnet_diagnostic.RCS1047.severity = suggestion # Non-asynchronous method name should not end with 'Async'
dotnet_diagnostic.RCS1048.severity = suggestion # Use lambda expression instead of anonymous method
dotnet_diagnostic.RCS1049.severity = suggestion # Simplify boolean comparison
dotnet_diagnostic.RCS1058.severity = suggestion # Use compound assignment
dotnet_diagnostic.RCS1075.severity = suggestion # Avoid empty catch clause that catches System.Exception
dotnet_diagnostic.RCS1079.severity = suggestion # Throwing of new NotImplementedException
dotnet_diagnostic.RCS1080.severity = warning   # Use 'Count/Length' property instead of 'Any' method
dotnet_diagnostic.RCS1097.severity = suggestion # Remove redundant 'ToString' call
dotnet_diagnostic.RCS1110.severity = warning   # Declare type inside namespace
dotnet_diagnostic.RCS1128.severity = suggestion # Use coalesce expression
dotnet_diagnostic.RCS1129.severity = suggestion # Remove redundant field initialization
dotnet_diagnostic.RCS1140.severity = suggestion # Add exception to documentation comment
dotnet_diagnostic.RCS1146.severity = suggestion # Use conditional access
dotnet_diagnostic.RCS1151.severity = suggestion # Remove redundant cast
dotnet_diagnostic.RCS1156.severity = suggestion # Use string.Length instead of comparison with empty string
dotnet_diagnostic.RCS1158.severity = warning   # Static member in generic type should use a type parameter
dotnet_diagnostic.RCS1161.severity = suggestion # Enum should declare explicit values
dotnet_diagnostic.RCS1169.severity = warning   # Make field read-only
dotnet_diagnostic.RCS1175.severity = suggestion # Unused this parameter
dotnet_diagnostic.RCS1188.severity = suggestion # Remove redundant auto-property initialization
dotnet_diagnostic.RCS1189.severity = suggestion # Add or remove region name
dotnet_diagnostic.RCS1201.severity = suggestion # Use method chaining
dotnet_diagnostic.RCS1205.severity = suggestion # Order named arguments according to the order of parameters
dotnet_diagnostic.RCS1212.severity = suggestion # Remove redundant assignment
dotnet_diagnostic.RCS1213.severity = suggestion # Remove unused member declaration
dotnet_diagnostic.RCS1222.severity = suggestion # Merge preprocessor directives
dotnet_diagnostic.RCS1232.severity = suggestion # Order elements in documentation comment
dotnet_diagnostic.RCS1234.severity = suggestion # Duplicate enum value
dotnet_diagnostic.RCS1236.severity = warning   # Use exception filter
